INCLUDE "hardware.inc"
INCLUDE "src/memory/hram.z80"
INCLUDE "src/memory/wram.z80"
INCLUDE "src/memory/vector_labels.z80"
INCLUDE "gfx/table_prototype.z80"
INCLUDE "gfx/pinball_tiles.z80"



SECTION "Header", ROM0[$100]
    ;our code here
EntryPoint: ;
    di ;disable interupts.... lol
    jp Start ;  
REPT $150 - $104
    db 0
ENDR


SECTION "Game Init", ROM0

Start:
    ; Turn off the LCD
    rst wait_vblank

    xor a ; ld a, 0 ; We only need to reset a value with bit 7 reset, but 0 does the job
    ld [rLCDC], a ; We will have to write to LCDC again later, so it's not a bother, really.
   
.copyTiles
    ld hl, $9000 ; vram
    ld bc, PinballTiles
    ld de, $7F0 
    call memcpy; 

.copyTableMap ;  '' this actually loads the tile map!
    ld hl, $9800 ; This will print toward the center of the screen. 
    ld bc, Table1
    ld de, 32*32  ; 12 bytes. I actaully think HELLO WORLD! is 24 bytes. why does 13 work????
    call memcpy

.copySprites
    ld hl, $8010
    ld bc, PinballTiles
    ld de,  $01FF 
    call memcpy

    ; blank A0 bytes in WRAM to use for OAM, that why there 
    ; isnt garbage ram data populated in OAM by default
.blankGarbageData
    ld b, $00;
    ld hl, wOAMBufferStart;
    ld de, wOAMBufferEnd - wOAMBufferStart;
    call memfill;
    ; now lets blank that first tile too.
    ld hl, $8000
    ld de, $10
    call memfill

    
    ; initialze game variables
    ld hl, wBallsRemaining   
    ld a, 3
    ld [hl], a

    ld a, %00000000
    ldh [hPinballFlags], a
    ldh [hPinballForceX], a
    ldh [hPinballForceY], a
    ldh [hTableFlags], a

    inc a
    ldh [hPinballAnimationTimer],a


    ; Set Stack pointer to low ram
    ld sp, $e000
    ; Init BG pallete
    ld a, %11100100
    ld [rBGP], a

    ; Set Sprite pallete
    ld a, %11100100
    ld [rOBP0],a

    ; Set BG scroll to 0 ,0 
    xor a ; ld a, 0
    ld [rSCX], a


    ld a, 112
    ld [rSCY], a

    ; Shut sound down
    ld [rNR52], a

    ; Turn screen on, sprites/objects on,  display background
    ld a, %10000011
    ld [rLCDC], a

     ;  should jumpt to a game loop instead of infinite

     ; lets try to copy sprite OAM to ram
    ld hl, $C000
    ld bc, pinballOAM
    ld de, 4 
    call memcpy

    ;move DMA subroutine to HRAM
    call CopyDMARoutine

    ;Enable interrupts
    ;ei 
    ; mask all interrupts besides VBLANK for now
   ; ld a, %00000001
   ; ld hl, $FFFF
    ld [hl], a
    ; the interrupt flags are at FF0F, not sure how to 'handle' these.... right now

.loop
 

    ; this should be handled in an interrupt, and it sho9uld be called with RST, saves a cycle. 
    ; that means we need "vectors" at special places in memory. the idea is its a shortcut to that address. yeah.
    rst wait_vblank ; wait for vblank


    ;; draw our sprites to OAM
    ld  a, HIGH($c000)
    call hOAMDMA


    ;; grab our new inputs
    call checkRawJoypadInput
    call handleCurrentInputs

    ;; update gamestate
    call  checkPinballUpdate
.endPinball
  
    
    jr .loop

SECTION "Font", ROM0
    
FontTiles:
INCBIN "font.chr"
FontTilesEnd:

;PinballTiles:
;INCBIN "gfx/pinball_tiles.bin"
;PinballTilesEnd:

dummySprite:
INCBIN "gfx/dummy.bin"
dummySpriteEnd:


; SECTION "dummy OAM Test", ROM0
; dummyOAM:
;     db $75, $8C, $01, $00  ;y- loc, x - loc, tile #,  flags
;  ;;   db $7d, $8C, $02, $00  ;bottom left
;     db $75, $94, $03, $00  ; top right
;     db $7D, $94, $04, $00  ; bottom right
; endDummyOAM:




SECTION "PinballOAMInit", ROM0
pinballOAM:
    db $30, $30, $01, $00  ;y- loc, x - loc, tile #,  flags , 



handleCurrentInputs::
   
    ld a, [hJoypadHeld]
    cp %00000000 ;; check for nothing
    ret z

    and %11110000
    cp %00000000 ;; check for nothing
    jr z, .checkButtonPresses

    ld a, [hJoypadHeld]
    bit 7, a
    call nz, moveSpriteDown

    ld a, [hJoypadHeld]
    bit 6, a
    call nz, moveSpriteUp

    ld a, [hJoypadHeld]
    bit 5, a
    call nz, moveSpriteLeft

    ld a, [hJoypadHeld]
    bit 4, a
    call nz, moveSpriteRight

.checkButtonPresses
    ld a,[hJoypadPressed]

    ;B Button
    bit 1, a
    call nz, swapWindows

    ret