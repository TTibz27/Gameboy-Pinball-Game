include "src/memory/hram.z80"
include "src/memory/wram.z80"
include "hardware.inc"


SECTION "PinballObjectUpdate", ROM0
checkPinballUpdate::
    ld a, [hPinballFlags]


    ;in play
    bit 4, a
    jr z, .handleNoBall

    ; in plunger
    bit 7, a 
    jr nz , .handlePlunger

;these are more "movement" modifiers than trult special states like plunger
    ; in slot
    bit 6, a 
    ; on ramp
    bit 5, a 

.updatePinballMovement
    ;; this is where we handle regular movement. 

    ;Y sign
    bit 2, a
    jr nz, .movePinballDown

.movePinballUp
    ld hl, $C000   ; first byte is y
    dec [hl]

    ;check if we are on bottom screen
    ldh a, [hTableFlags]
    bit 7,a
    jr nz, .checkPinballX ; ignore if 1, that means we are already up top
    ; transition if sprite is >10
    ld a, [hl]
    cp a, $10
    jr c, .swapWindowsUp
    jr .checkPinballX

.swapWindowsUp
    ld a, $90
    ld [$C000], a   ; first byte is y
    call swapWindows
    
.movePinballDown
    ld hl, $C000   ; first byte is y
    inc [hl]
.checkPinballX
.movePinballLeft
.MovePinballRight


    jr .applyGravity


.applyGravity
    ret

.handleNoBall
    ld hl, wBallsRemaining
; IF there arent any balls remaining then we jump to game over state.

; ELSE we decrement remaining, load the ball into the plunger,, set in-play to true
    dec [hl]

; In play & in plunger flags
    ld a, %10010000
    ldh [hPinballFlags], a

; clear plunger power
    xor a
    ld [wPlungerPower], a


;; move ball sprite to plunger position
    ld hl, $C000 
    ld [hl], $75
    inc l
    ld [hl], $9C

;set viewport to low
    ld a, 112
    ld [rSCY], a

    ret

.handlePlunger
    ld a, [hJoypadReleased]
    bit 0, a
    jr nz, .plundgerRelease
    ld a, [hJoypadHeld]
    bit 0, a
    ret z

    ld a, [wPlungerPower]
    cp a, $FF
    ret z
    inc a
    ld [wPlungerPower], a
    ret

.plundgerRelease
    ;remove flag
    ld a, %00010000
    ldh [hPinballFlags], a
    
    ;copy plunger power into Y force 
    ld a, [wPlungerPower]
    ldh [hPinballForceY], a

    ret

