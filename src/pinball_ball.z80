include "src/memory/hram.z80"
include "src/memory/wram.z80"
include "hardware.inc"


SECTION "PinballObjectUpdate", ROM0
checkPinballUpdate::

    ld a, [hPinballFlags]
 ;; let's check for special states here
    ;in play
    bit 4, a
    jr z, .handleNoBall
    ; in plunger
    bit 7, a 
    jr nz , .handlePlunger

.animatePinball
    ;; this is where we update the ball OAM x,y values 
    ;; rotate the animation check
    ld hl, hPinballAnimationTimer
.rotateAnimationTimerRight
    rrc [hl]
    jr c, .rotateAnimationTimerRight ;; if we have the carry flag, rotate again so it goes back to the value

    ;compare animation timer bit to current "mask", jump/ don't animate if zero
    ldh a, [hPinballAnimateMaskY]
    and [hl]
    jr z, .checkPinballX

    ;Y sign
    ld a, [hPinballFlags]
    bit 2, a
    jr nz, .movePinballDown

.movePinballUp
    ld hl, $C000   ; first byte is y
    dec [hl]
    ;check if we are on bottom screen
    ldh a, [hTableFlags]
    bit 0 , a
    jr nz, .checkPinballX ; ignore if 1, that means we are already up top
    ; transition if sprite is >10
    ld a, [hl]
    cp a, $10
    jr c, .swapWindowsUp
    jr .checkPinballX

.swapWindowsUp
    ld a, $90
    ld [$C000], a   ; first byte is y
    call swapWindows
    
.movePinballDown
    ld hl, $C000   ; first byte is y
    inc [hl]
.checkPinballX
.movePinballLeft
.MovePinballRight

    jr .updateBallPhysics


.handleNoBall
    ld hl, wBallsRemaining
; IF there arent any balls remaining then we jump to game over state.

; ELSE we decrement remaining, load the ball into the plunger,, set in-play to true
    dec [hl]

; In play & in plunger flags
    ld a, %10010000
    ldh [hPinballFlags], a

; clear plunger power
    xor a
    ld [wPlungerPower], a


;; move ball sprite to plunger position
    ld hl, $C000 
    ld [hl], $75
    inc l
    ld [hl], $9C

;set viewport to low
    ld a, 112
    ld [rSCY], a

    ret

.handlePlunger
    ld a, [hJoypadReleased]
    bit 0, a
    jr nz, .plundgerRelease
    ld a, [hJoypadHeld]
    bit 0, a
    ret z

    ld a, [wPlungerPower]
    cp a, $FF
    ret z
    inc a
    ld [wPlungerPower], a
    ret

.plundgerRelease
    ;remove flag
    ld a, %00010000
    ldh [hPinballFlags], a
    
    ;copy plunger power into Y force 
    ld a, [wPlungerPower]
    ldh [hPinballForceY], a

    ; copy force into animation mask
    jr .setSpeedMasks

.updateBallPhysics
     ldh a, [hPinballAnimationTimer]
     and %001000100
     jr z, .setSpeedMasks
    ;gravity needs to check every other animation cycle....
   
    ; put the force into b
    ldh a, [hPinballForceY]
    ld b,a

    ldh a, [hPinballFlags]
    bit 2, a
    jr nz, .gravToNegativeValue

    
    dec b
    ld a, $FF
    cp b
    jr nz, .applyGravToForce

    ;if we dec and hit FF then we need to change to negative. 
    ldh a, [hPinballFlags]
    set 2, a
    ld [hPinballFlags], a
    ld b, $00

.gravToNegativeValue
    ld a, $FF
    cp b
    jr z, .applyGravToForce

    inc b

.applyGravToForce
    ld a, b
    ldh [hPinballForceY], a

    
    ; ;these are more "movement" modifiers than trult special states like plunger
    ; ; in slot
    ; bit 6, a 
    ; ; on ramp
    ; bit 5, a 

    ;copy correct value to speed mask if speed changes top nyble
.setSpeedMasks
    ld a,[hPinballForceY]
    ld b, $00
    ld c, $0F
    
    swap a
    and c
    ;swap a
     ;; now we should have $000X in BC... hopefully. lol

    ; look at proper table and update animate mask
    ld h, $19
    ld l, a

    ld a, [hl]
    ;; debug to see if we are grabbing the correct thing here....
    ld d, h
    ld e, l
    ld [hPinballAnimateMaskY], a
    ret

